name: Daily surprise app

on:
  schedule:
    - cron: "0 06 * * *"  # 06:00 UTC ~ 08:00 Stockholm
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate today's app (index.html)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          mkdir -p dist

          # Write prompts to files (avoids YAML multiline issues)
          cat > sys.txt <<'EOF'
You will output a single self-contained HTML file that runs in a browser with inline CSS and JS. No build tools and no servers.
Requirements:
- Must be interactive.
- Rotate category by (new Date().getDay() % 3) -> [useful, fun, absurd].
- Use at least one technique not used in the last three programs.
- Include exactly one random twist: AI-generated content, 3D graphics, sound/music, live internet data (with fallback), or unusual browser APIs.
- Ensure the idea clearly differs from the last 7 conceptual runs (no repeated core mechanics or themes).
Output:
1) A markdown list titled "Why this is new today" with 3-5 bullets.
2) One complete HTML document in a code fence.
Constraints:
- Single-file; inline assets; support mouse, touch, keyboard.
- If a permission or API is blocked, feature-detect and provide a fallback.
EOF

          cat > user.txt <<'EOF'
Create a unique, browser-executable program now. Include the "Why this is new today" section and then a single complete HTML file.
EOF

          # Build JSON safely with jq
          jq -n --rawfile sys sys.txt --rawfile usr user.txt \
            '{model:"gpt-4o-mini", input:[{role:"system",content:$sys},{role:"user",content:$usr}]}' > body.json

          # Call OpenAI Responses API
          curl -s https://api.openai.com/v1/responses \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @body.json \
            | jq -r '.output_text' > dist/generated.txt || true

          # Extract HTML code block; fallback to full text
          awk 'BEGIN{code=0} /```html/ {code=1; next} /```/ && code==1 {code=0; next} {if(code) print}' dist/generated.txt > dist/index.html || true
          if [ ! -s dist/index.html ]; then cp dist/generated.txt dist/index.html; fi

          # Minimal sanity check
          if ! grep -qi "<html" dist/index.html; then
            echo "<!doctype html><title>Error</title><pre>Model did not return HTML.</pre>" > dist/index.html
          fi

          # Simple landing page that links to today's app
          cp dist/index.html dist/today.html
          printf '%s\n' '<!doctype html><meta charset="utf-8"><title>dailyAI</title><body style="font:16px system-ui,sans-serif;display:grid;place-items:center;min-height:100vh"><h1>dailyAI</h1><p><a href="./today.html">Open todays surprise app</a></p>' > dist/index.html

      - name: Debug: show first lines of outputs
        run: |
          echo "=== generated.txt (head) ==="
          head -n 40 dist/generated.txt || true
          echo "=== index.html (head) ==="
          head -n 40 dist/index.html || true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
